(int, int, int) load_data() inline_ref {
	var ds = get_data().begin_parse();
	var res = (
		ds~load_uint(32),
		ds~load_uint(256),
		ds~load_grams()
	);
	ds.end_parse();
	return res;
}

() save_data(int seqno, int public_key, int total_locked) impure inline_ref {
	var st = begin_cell()
		.store_uint(seqno, 32)
		.store_uint(public_key, 256)
		.store_grams(total_locked)
		.end_cell();
	set_data(st);
}

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice in_msg) impure {
	slice signature = in_msg~load_bits(512);
	var cs = in_msg;
	int seqno = cs~load_uint(32);

	(int stored_seqno, int public_key, int total_locked) = load_data();
	throw_unless(33, seqno == stored_seqno);
	throw_unless(34, check_signature(slice_hash(in_msg), signature, public_key));

	accept_message(); ;; message is signed by owner, sanity not guaranteed yet

	int op = cs~load_uint(32);
    ifnot (op) {
		;; init contract
	}

	save_data(seqno + 1, public_key, total_locked);
}

;; Get methods

_ get_bridge_data() method_id {
    (int seqno, int public_key, int total_locked) = load_data();
    return (seqno, public_key, total_locked);
}
